<?xml version='1.0'?>
<launch>

	<!-- ******************************************************************************************************************* -->

	<!-- ARGUMENTS -->

	<arg name="fusion" 							default="true"/>          <!-- Enable/Disable local and global EKF tf broadcasting (odom->base_footprint and map->odom, respectively) -->
	<arg name="navigation" 					default="false"/>         <!-- Set to true to run autonomous navigation algorithms (Map server, AMCL, Nav Stack) -->
	<arg name="qr" 									default="false"/>		  		<!-- Set to true to run QR global localization -->
	<arg name="world" 							default="empty"/>	  			<!-- Gazebo world to be loaded -->

	<arg name="use_pid"							default="true"/>		  		<!-- Set to true to use the gazebo ros control pid loop (otherwise the velocity setpoint will be forwarded to the joint -->

	<arg name="custom_hw_interface" default="false" />				<!-- Set to true to use the sample gazebo_ros_control hardware interface in the wheelchair_gazebo_interface package (instead the DefaultRobotHWSim)-->
	<arg name="custom_controller" 	default="false" />				<!-- Set to true to use the sample diff-effort control loop in the wheelchair_sample_controllers package (instead the standard ros_control Diff Drive) -->


	<!-- ******************************************************************************************************************* -->


	<!-- Gazebo -->
	<include file="$(find wheelchair_gazebo)/launch/wheelchair_gazebo.launch">
		<arg name="world" value="$(arg world)" />
		<arg name="use_pid" value="$(arg use_pid)" />
		<arg name="custom_hw_interface" value="$(arg custom_hw_interface)" />
		<arg name="custom_controller" value="$(arg custom_controller)" />
	</include>

	<!-- Control -->
	<include file="$(find wheelchair_gazebo)/launch/wheelchair_control.launch" >
		<arg name="custom_controller" value="$(arg custom_controller)" />
	</include>

	<!-- Localization -->
	<include file="$(find wheelchair_gazebo)/launch/wheelchair_localization.launch">
		<arg name="navigation" value="$(arg navigation)" />
		<arg name="fusion" value="$(arg fusion)" />
		<arg name="qr" value="$(arg qr)" />
	</include>

	<!-- Navigation -->
	<include file="$(find wheelchair_gazebo)/launch/wheelchair_navigation.launch" if="$(arg navigation)" >
		<arg name="world" value="$(arg world)" />
		<arg name="fusion" value="$(arg fusion)" />
	</include>

	<!-- RViz -->
	<node pkg="rviz" type="rviz" name="rviz" args="-d $(find wheelchair_description)/config/wheelchair_navigation.rviz" if="$(arg navigation)"/>
	<node pkg="rviz" type="rviz" name="rviz" args="-d $(find wheelchair_description)/config/wheelchair_base.rviz" unless="$(arg navigation)"/>

	<!-- ROS Diagnostics - Updater -->
	
	<node pkg="diagnostic_updater" type="imu_updater" name="imu_updater" output="screen"></node>
	<node pkg="diagnostic_updater" type="odometry_updater" name="odometry_updater" output="screen"></node>
	<node pkg="diagnostic_updater" type="cmd_vel_updater" name="cmd_vel_updater" output="screen"></node>
	<node pkg="diagnostic_updater" type="laser_scan_updater" name="laser_scan_updater" output="screen"></node>	
	<node pkg="diagnostic_updater" type="joint_right_wheel" name="joint_right_wheel" output="screen"></node>
	<node pkg="diagnostic_updater" type="joint_left_wheel" name="joint_left_wheel" output="screen"></node>
	<node pkg="diagnostic_updater" type="odometry_ekf_updater" name="odometry_ekf_updater" output="screen"></node>
	<node pkg="diagnostic_updater" type="odometry_ground_truth_odom_updater" name="odometry_ground_truth_odom_updater" output="screen"></node>
	
	<!-- ROS Diagnostics - Aggregator -->

	<node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator" >
			<rosparam command="load" file="$(find diagnostic_aggregator)/config/wheelchair_aggregator.yaml" />
		</node>

	<!-- ROS Diagnostics - YAML -->
	
	<rosparam command="load" file="$(find diagnostic_updater)/config/imu_threshold.yaml" />
	<rosparam command="load" file="$(find diagnostic_updater)/config/odometry_diff_drive_threshold.yaml" />
	<rosparam command="load" file="$(find diagnostic_updater)/config/cmd_vel_threshold.yaml" />
	<rosparam command="load" file="$(find diagnostic_updater)/config/ekf_local_odometry_threshold.yaml" />
	<rosparam command="load" file="$(find diagnostic_updater)/config/ground_truth_odom_threshold.yaml" />
	<rosparam command="load" file="$(find diagnostic_updater)/config/scan_threshold.yaml" />	
	<rosparam command="load" file="$(find diagnostic_updater)/config/right_joint_wheel.yaml" />
	<rosparam command="load" file="$(find diagnostic_updater)/config/left_joint_wheel.yaml" />
		
	<!-- rqt runtime monitor-->

	<node pkg="rqt_runtime_monitor" type="rqt_runtime_monitor" name="runtime_monitor" />	

	<!-- rqt robot monitor-->
	
	<node pkg="rqt_robot_monitor" type="rqt_robot_monitor" name="rqt_robot_monitor" />	


</launch>
